name: Terraform Plan
on:
  workflow_call:
    inputs:
      stack:
        type: string
        description: The stack to run terraform plan on. Defaults to dev.
        default: dev
      env:
        type: string
        description: GitHub environment to run terraform plan. Defaults to dev-viewer.
        default: dev-viewer
      gcp_project_id:
        type: string
        description: GCP project ID to run in. This is the string ID.
        required: true
      gcp_project_number:
        type: string
        description: GCP project number to run in. This is the numeric ID.
        required: true
      workload_identity_pool:
        type: string
        description: Workload Identity Pool to use for authentication Defaults to github.
        default: github
      workload_identity_provider:
        type: string
        description: Workload Identity Provider within the pool. Defaults to github.
        default: github
      service_account:
        type: string
        description: Service account to execute as. Defaults to terraform-viewer@<GCP project ID>.iam.gserviceaccount.com.
        default: ""

jobs:
  plan:
    runs-on: ubuntu-latest

    environment: ${{ inputs.env }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ inputs.gcp_project_number }}/locations/global/workloadIdentityPools/${{ inputs.workload_identity_pool }}/providers/${{ inputs.workload_identity_provider }}
          project_id: ${{ inputs.gcp_project_id }}
          service_account: ${{ inputs.service_account || format('terraform-viewer@{0}.iam.gserviceaccount.com', inputs.gcp_project_id) }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - run: pnpm install

      - run: pnpm run synth

      - name: Terraform Init
        run: terraform init
        working-directory: cdktf.out/stacks/${{ inputs.stack }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: cdktf.out/stacks/${{ inputs.stack }}

      - uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lines = process.env.PLAN
              .replace(new RegExp('\\n' + '-'.repeat(72) + '[\\s\\S]*'), '')
              .split('\n')
              .filter(line => !line.includes('Refreshing state...'))

            const output = `
              #### Terraform Plan (${{ inputs.stack }}) ðŸ“–\`${{ steps.plan.outcome }}\`

              <details><summary>Show Plan</summary>

              \`\`\`${ lines.join('\n') }\`\`\`

              </details>
            `;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan (${{ inputs.stack }}}})')
            })

            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              })
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
